main.js:
import "./style.css";
import Phaser from "phaser";

const sizes = { width: 500, height: 500 };
const speedDown = 300;
let isPaused = false;

const gameCanvas = document.getElementById("gameCanvas");
const startMenu = document.getElementById("startMenu");
const startGameBtn = document.getElementById("startGameBtn");

const pauseBtn = document.getElementById("pauseBtn");
const resumeBtn = document.getElementById("resumeBtn");
const restartBtn = document.getElementById("restartBtn");
const menuBtn = document.getElementById("menuBtn");

class GameScene extends Phaser.Scene {
  constructor() {
    super("scene-game");
    this.player = null;
    this.target = null;
    this.points = 0;
    this.cursor = null;
    this.textScore = null;
  }

  preload() {
    this.load.image("bg", "/assets/bg.png");
    this.load.image("basket", "/assets/basket.png");
    this.load.image("apple", "/assets/apple.png");
    this.load.audio("coin", "/assets/coin.mp3"); // Âm thanh khi hứng táo
    this.load.audio("bgMusic", "/assets/bgMusic.mp3"); // Nhạc nền
  }

  create() {
    this.add.image(0, 0, "bg").setOrigin(0, 0);
    this.playTime = 0;
    this.textTime = this.add.text(10, 40, "Time: 0s", { font: "25px Arial", fill: "#ffffff" });

    // Khởi tạo âm thanh
    this.coinMusic = this.sound.add("coin");
    this.bgMusic = this.sound.add("bgMusic", { loop: true, volume: 0.5 });
    this.bgMusic.play(); // Bắt đầu phát nhạc nền

    // Tạo giỏ hứng
    this.player = this.physics.add.image(sizes.width / 2, sizes.height - 100, "basket").setOrigin(0.5, 0);
    this.player.setCollideWorldBounds(true);

    // Táo rơi
    this.target = this.physics.add.image(this.getRandomX(), 0, "apple").setOrigin(0.5, 0);
    this.target.setVelocityY(speedDown);

    this.physics.add.overlap(this.target, this.player, this.targetHit, null, this);

    this.cursor = this.input.keyboard.createCursorKeys();

    this.textScore = this.add.text(10, 10, "Score: 0", { font: "25px Arial", fill: "#ffffff" });

    this.scene.pause("scene-game"); // Dừng game khi bắt đầu
  }

  update(time, delta) {
    if (isPaused) return;

    // Cập nhật thời gian chơi (tăng theo mili giây)
    this.playTime += delta / 1000;
    this.textTime.setText(`Time: ${Math.floor(this.playTime)}s`);

    // Xử lý di chuyển giỏ
    const { left, right } = this.cursor;
    if (left.isDown) {
      this.player.setVelocityX(-300);
    } else if (right.isDown) {
      this.player.setVelocityX(300);
    } else {
      this.player.setVelocityX(0);
    }

    // Xử lý táo rơi
    if (this.target.y >= sizes.height) {
      this.target.setY(0);
      this.target.setX(this.getRandomX());
    }
  }

  getRandomX() {
    return Math.floor(Math.random() * (sizes.width - 20)) + 10;
  }

  targetHit() {
    this.target.setY(0);
    this.target.setX(this.getRandomX());
    this.points++;
    this.textScore.setText(`Score: ${this.points}`);

    this.coinMusic.play(); // Phát âm thanh khi bắt táo
    this.target.setY(0);
    this.target.setX(this.getRandomX());
    this.points++;
    this.textScore.setText(`Score: ${this.points}`);
  }

  restartGame() {
    this.points = 0;
    this.playTime = 0; // Reset thời gian chơi
    this.textScore.setText("Score: 0");
    this.textTime.setText("Time: 0s");
    this.target.setY(0);
    this.target.setX(this.getRandomX());
    this.scene.resume("scene-game");
    isPaused = false;
  }  
}

// Cấu hình game
const config = {
  type: Phaser.WEBGL,
  width: sizes.width,
  height: sizes.height,
  canvas: gameCanvas,
  physics: { default: "arcade", arcade: { gravity: { y: 0 } } },
  scene: [GameScene],
};

// Khởi động game
const game = new Phaser.Game(config);
const gameScene = game.scene.getScene("scene-game");

pauseBtn.addEventListener("click", () => {
  game.scene.pause("scene-game");
  isPaused = true;
  showStatus("Game Paused"); // Hiển thị thông báo
});

resumeBtn.addEventListener("click", () => {
  game.scene.resume("scene-game");
  isPaused = false;
  showStatus("Game Resumed"); // Hiển thị thông báo
});

restartBtn.addEventListener("click", () => {
  gameScene.restartGame();
  showStatus("Game Restarted"); // Hiển thị thông báo
});

menuBtn.addEventListener("click", () => {
  game.scene.pause("scene-game");
  startMenu.style.display = "flex";
  isPaused = true;
  showStatus("Back to Menu"); // Hiển thị thông báo
});

startGameBtn.addEventListener("click", () => {
  startMenu.style.display = "none";
  game.scene.resume("scene-game");
  bgMusic.play(); // Chạy nhạc nền khi bắt đầu game
});

menuBtn.addEventListener("click", () => {
  game.scene.pause("scene-game");
  startMenu.style.display = "flex";
  isPaused = true;
  bgMusic.stop(); // Dừng nhạc nền khi quay lại Menu

  // Hiển thị điểm số & thời gian đã chơi
  alert(`Điểm số: ${gameScene.points}\nThời gian chơi: ${Math.floor(gameScene.playTime)}s`);
});

document.getElementById("applySettings").addEventListener("click", () => {
  const newVolume = document.getElementById("volumeSlider").value;
  const newFallSpeed = document.getElementById("fallSpeed").value;
  const newBasketSpeed = document.getElementById("basketSpeed").value;
  const newTextColor = document.getElementById("textColor").value;

  bgMusic.setVolume(newVolume);
  gameScene.target.setVelocityY(parseInt(newFallSpeed));
  gameScene.playerSpeed = parseInt(newBasketSpeed);
  gameScene.textScore.setColor(newTextColor);
  gameScene.textTime.setColor(newTextColor);

  alert("Cài đặt đã được cập nhật!");
});

const statusDiv = document.getElementById("statusDiv");

function showStatus(message) {
  statusDiv.textContent = message;
  statusDiv.style.display = "block";

  setTimeout(() => {
    statusDiv.style.display = "none";
  }, 2000);
}
===
index.html:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Hứng Táo</title>

    <!-- Bootstrap 5 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <!-- FontAwesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/style.css">
  </head>
  <body class="d-flex flex-column min-vh-100">

    <!-- Navbar điều khiển -->
    <nav class="navbar navbar-expand bg-dark navbar-dark">
      <div class="container-fluid">
        <button id="pauseBtn" class="btn btn-warning"><i class="fa-solid fa-pause"></i> Tạm dừng</button>
        <button id="resumeBtn" class="btn btn-success"><i class="fa-solid fa-play"></i> Tiếp tục</button>
        <button id="restartBtn" class="btn btn-danger"><i class="fa-solid fa-rotate-left"></i> Chơi lại</button>
        <button id="menuBtn" class="btn btn-primary"><i class="fa-solid fa-bars"></i> Về menu</button>
      </div>
    </nav>
    <div id="statusDiv" class="status-box">Game Running...</div>
    <!-- Menu bắt đầu -->
    <div id="startMenu" class="gameUI">
      <h1>Apple Catcher</h1>
      <button id="startGameBtn" class="btn btn-success"><i class="fa-solid fa-play"></i> Chơi</button>
      <button id="settingsBtn" class="btn btn-secondary"><i class="fa-solid fa-cog"></i> Cài đặt</button>
    </div>

    <!-- Khu vực game -->
    <main class="d-flex justify-content-center align-items-center flex-grow-1">
      <canvas id="gameCanvas"></canvas>
    </main>

    <!-- Navbar -->
<nav class="navbar navbar-dark bg-dark justify-content-between">
  <a class="navbar-brand ms-3"><i class="fa-solid fa-apple-whole"></i> Apple Catcher</a>
  <div>
    <button id="pauseBtn" class="btn btn-warning"><i class="fa-solid fa-pause"></i></button>
    <button id="resumeBtn" class="btn btn-success"><i class="fa-solid fa-play"></i></button>
    <button id="restartBtn" class="btn btn-danger"><i class="fa-solid fa-rotate-left"></i></button>
    <button id="menuBtn" class="btn btn-primary"><i class="fa-solid fa-bars"></i></button>
    <button id="settingsBtn" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#settingsModal"><i class="fa-solid fa-cog"></i></button>
  </div>
</nav>

<!-- Modal Cài đặt -->
<div class="modal fade" id="settingsModal">
  <div class="modal-dialog">
    <div class="modal-content bg-dark text-light">
      <div class="modal-header">
        <h5 class="modal-title">Cài đặt Game</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <label>Ngôn ngữ:</label>
        <select id="languageSelect" class="form-select">
          <option value="vi">Tiếng Việt</option>
          <option value="en">English</option>
          <option value="zh">中文</option>
        </select>

        <label>Âm lượng nhạc:</label>
        <input type="range" id="volumeSlider" min="0" max="1" step="0.1" class="form-range">

        <label>Tốc độ táo rơi:</label>
        <input type="number" id="fallSpeed" min="100" max="600" class="form-control">

        <label>Tốc độ giỏ:</label>
        <input type="number" id="basketSpeed" min="100" max="600" class="form-control">

        <label>Màu chữ:</label>
        <input type="color" id="textColor" class="form-control">
      </div>
      <div class="modal-footer">
        <button id="applySettings" class="btn btn-success">Lưu</button>
      </div>
    </div>
  </div>
</div>

    <!-- Footer -->
    <footer class="bg-dark text-white text-center py-3">
      <p><i class="fa-solid fa-copyright"></i> 2025 - Developed by HaHuyNam</p>
    </footer>

    <script type="module" src="/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  </body>
</html>
===
style.css:
:root {
  --dkClr: #181818;
  --liClr: whitesmoke;
  --accClr: #0d0d35;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background-color: var(--dkClr);
  color: var(--liClr);
}

nav {
  padding: 10px;
  display: flex;
  justify-content: space-around;
}

/* Menu bắt đầu */
.gameUI {
  width: 100%;
  height: 100%;
  background-color: var(--accClr);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 2;
}

#startMenu {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

canvas {
  border-radius: 15px;
  box-shadow: 0px 4px 10px rgba(255, 255, 255, 0.3);
}

.status-box {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  padding: 10px 20px;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  font-size: 20px;
  border-radius: 5px;
  display: none;
}

nav {
  padding: 10px;
}
canvas {
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(255, 255, 255, 0.3);
}
===
